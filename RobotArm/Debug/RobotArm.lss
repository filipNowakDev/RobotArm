
RobotArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000e46  00000eda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800090  00800090  00000f0a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001807  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be8  00000000  00000000  0000291b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c25  00000000  00000000  00003503  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  00004128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b8  00000000  00000000  00004474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d2a  00000000  00000000  00004a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005756  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 39       	cpi	r26, 0x9C	; 156
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8c 01 	call	0x318	; 0x318 <main>
  8a:	0c 94 21 07 	jmp	0xe42	; 0xe42 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <i2cInit>:
	uint8_t status = TWSR & I2C_STATUS_MASK;
	if(last)
		return (status == I2C_DATA_RECEIVED_NACK) ? I2C_OK : status;
	else
		return (status == I2C_DATA_RECEIVED_ACK) ? I2C_OK : status;
}
  92:	84 e0       	ldi	r24, 0x04	; 4
  94:	86 bf       	out	0x36, r24	; 54
  96:	8d ef       	ldi	r24, 0xFD	; 253
  98:	80 b9       	out	0x00, r24	; 0
  9a:	08 95       	ret

0000009c <i2cStart>:
  9c:	84 ea       	ldi	r24, 0xA4	; 164
  9e:	86 bf       	out	0x36, r24	; 54
  a0:	06 b6       	in	r0, 0x36	; 54
  a2:	07 fe       	sbrs	r0, 7
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <i2cStart+0x4>
  a6:	81 b1       	in	r24, 0x01	; 1
  a8:	88 7f       	andi	r24, 0xF8	; 248
  aa:	88 30       	cpi	r24, 0x08	; 8
  ac:	19 f0       	breq	.+6      	; 0xb4 <i2cStart+0x18>
  ae:	80 31       	cpi	r24, 0x10	; 16
  b0:	19 f0       	breq	.+6      	; 0xb8 <i2cStart+0x1c>
  b2:	08 95       	ret
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	08 95       	ret
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	08 95       	ret

000000bc <i2cStop>:
  bc:	84 e9       	ldi	r24, 0x94	; 148
  be:	86 bf       	out	0x36, r24	; 54
  c0:	06 b6       	in	r0, 0x36	; 54
  c2:	04 fc       	sbrc	r0, 4
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <i2cStop+0x4>
  c6:	08 95       	ret

000000c8 <i2cSend>:
  c8:	83 b9       	out	0x03, r24	; 3
  ca:	84 e8       	ldi	r24, 0x84	; 132
  cc:	86 bf       	out	0x36, r24	; 54
  ce:	06 b6       	in	r0, 0x36	; 54
  d0:	07 fe       	sbrs	r0, 7
  d2:	fd cf       	rjmp	.-6      	; 0xce <i2cSend+0x6>
  d4:	08 95       	ret

000000d6 <i2cSendAddress>:
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
  da:	0e 94 64 00 	call	0xc8	; 0xc8 <i2cSend>
  de:	91 b1       	in	r25, 0x01	; 1
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	8c 2f       	mov	r24, r28
  e4:	81 70       	andi	r24, 0x01	; 1
  e6:	c0 ff       	sbrs	r28, 0
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <i2cSendAddress+0x1c>
  ea:	90 34       	cpi	r25, 0x40	; 64
  ec:	31 f0       	breq	.+12     	; 0xfa <i2cSendAddress+0x24>
  ee:	89 2f       	mov	r24, r25
  f0:	05 c0       	rjmp	.+10     	; 0xfc <i2cSendAddress+0x26>
  f2:	98 31       	cpi	r25, 0x18	; 24
  f4:	19 f0       	breq	.+6      	; 0xfc <i2cSendAddress+0x26>
  f6:	89 2f       	mov	r24, r25
  f8:	01 c0       	rjmp	.+2      	; 0xfc <i2cSendAddress+0x26>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <i2cSendData>:
 100:	0e 94 64 00 	call	0xc8	; 0xc8 <i2cSend>
 104:	81 b1       	in	r24, 0x01	; 1
 106:	88 7f       	andi	r24, 0xF8	; 248
 108:	88 32       	cpi	r24, 0x28	; 40
 10a:	09 f4       	brne	.+2      	; 0x10e <i2cSendData+0xe>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	08 95       	ret

00000110 <i2cWriteRegister>:

void i2cWriteRegister(uint8_t dev_address, uint8_t dev_register, uint8_t data)
{
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	18 2f       	mov	r17, r24
 118:	d6 2f       	mov	r29, r22
 11a:	c4 2f       	mov	r28, r20
	i2cStart();
 11c:	0e 94 4e 00 	call	0x9c	; 0x9c <i2cStart>
	i2cSendAddress(dev_address << 1);
 120:	81 2f       	mov	r24, r17
 122:	88 0f       	add	r24, r24
 124:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2cSendAddress>
	i2cSendData(dev_register);
 128:	8d 2f       	mov	r24, r29
 12a:	0e 94 80 00 	call	0x100	; 0x100 <i2cSendData>
	i2cSendData(data);
 12e:	8c 2f       	mov	r24, r28
 130:	0e 94 80 00 	call	0x100	; 0x100 <i2cSendData>
	i2cStop();
 134:	0e 94 5e 00 	call	0xbc	; 0xbc <i2cStop>
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	08 95       	ret

00000140 <lcdReadAddress>:
void lcdWriteString(char* string)
{
	uint8_t i = 0;
	while(string[i] != '\0')
		lcdWriteData(string[i++]);
}
 140:	cf 93       	push	r28
 142:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <switchedTo4BitMode>
 146:	88 23       	and	r24, r24
 148:	71 f0       	breq	.+28     	; 0x166 <lcdReadAddress+0x26>
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcdRead>
 152:	c8 2f       	mov	r28, r24
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcdRead>
 15c:	c0 7f       	andi	r28, 0xF0	; 240
 15e:	82 95       	swap	r24
 160:	8f 70       	andi	r24, 0x0F	; 15
 162:	8c 2b       	or	r24, r28
 164:	04 c0       	rjmp	.+8      	; 0x16e <lcdReadAddress+0x2e>
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcdRead>
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <lcdWrite>:
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	c8 2f       	mov	r28, r24
 178:	d6 2f       	mov	r29, r22
 17a:	41 11       	cpse	r20, r1
 17c:	05 c0       	rjmp	.+10     	; 0x188 <lcdWrite+0x16>
 17e:	08 c0       	rjmp	.+16     	; 0x190 <lcdWrite+0x1e>
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <lcdWrite+0x10>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcdWrite+0x16>
 188:	0e 94 a0 00 	call	0x140	; 0x140 <lcdReadAddress>
 18c:	88 23       	and	r24, r24
 18e:	c4 f3       	brlt	.-16     	; 0x180 <lcdWrite+0xe>
 190:	d9 98       	cbi	0x1b, 1	; 27
 192:	dd 23       	and	r29, r29
 194:	11 f0       	breq	.+4      	; 0x19a <lcdWrite+0x28>
 196:	da 9a       	sbi	0x1b, 2	; 27
 198:	01 c0       	rjmp	.+2      	; 0x19c <lcdWrite+0x2a>
 19a:	da 98       	cbi	0x1b, 2	; 27
 19c:	8a b3       	in	r24, 0x1a	; 26
 19e:	80 6f       	ori	r24, 0xF0	; 240
 1a0:	8a bb       	out	0x1a, r24	; 26
 1a2:	8b b3       	in	r24, 0x1b	; 27
 1a4:	9c 2f       	mov	r25, r28
 1a6:	9f 60       	ori	r25, 0x0F	; 15
 1a8:	89 23       	and	r24, r25
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	8b b3       	in	r24, 0x1b	; 27
 1ae:	c0 7f       	andi	r28, 0xF0	; 240
 1b0:	c8 2b       	or	r28, r24
 1b2:	cb bb       	out	0x1b, r28	; 27
 1b4:	d8 9a       	sbi	0x1b, 0	; 27
 1b6:	00 00       	nop
 1b8:	d8 98       	cbi	0x1b, 0	; 27
 1ba:	00 00       	nop
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <lcdRead>:
 1c2:	cf 93       	push	r28
 1c4:	c8 2f       	mov	r28, r24
 1c6:	61 11       	cpse	r22, r1
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <lcdRead+0xc>
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <lcdRead+0x14>
 1cc:	00 00       	nop
 1ce:	0e 94 a0 00 	call	0x140	; 0x140 <lcdReadAddress>
 1d2:	88 23       	and	r24, r24
 1d4:	dc f3       	brlt	.-10     	; 0x1cc <lcdRead+0xa>
 1d6:	d9 9a       	sbi	0x1b, 1	; 27
 1d8:	cc 23       	and	r28, r28
 1da:	11 f0       	breq	.+4      	; 0x1e0 <lcdRead+0x1e>
 1dc:	da 9a       	sbi	0x1b, 2	; 27
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <lcdRead+0x20>
 1e0:	da 98       	cbi	0x1b, 2	; 27
 1e2:	8a b3       	in	r24, 0x1a	; 26
 1e4:	8f 70       	andi	r24, 0x0F	; 15
 1e6:	8a bb       	out	0x1a, r24	; 26
 1e8:	d8 9a       	sbi	0x1b, 0	; 27
 1ea:	00 00       	nop
 1ec:	89 b3       	in	r24, 0x19	; 25
 1ee:	d8 98       	cbi	0x1b, 0	; 27
 1f0:	00 00       	nop
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <lcdWriteCommand>:
 1f6:	cf 93       	push	r28
 1f8:	c8 2f       	mov	r28, r24
 1fa:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <switchedTo4BitMode>
 1fe:	88 23       	and	r24, r24
 200:	69 f0       	breq	.+26     	; 0x21c <lcdWriteCommand+0x26>
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	8c 2f       	mov	r24, r28
 208:	0e 94 b9 00 	call	0x172	; 0x172 <lcdWrite>
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	8c 2f       	mov	r24, r28
 212:	82 95       	swap	r24
 214:	80 7f       	andi	r24, 0xF0	; 240
 216:	0e 94 b9 00 	call	0x172	; 0x172 <lcdWrite>
 21a:	05 c0       	rjmp	.+10     	; 0x226 <lcdWriteCommand+0x30>
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	8c 2f       	mov	r24, r28
 222:	0e 94 b9 00 	call	0x172	; 0x172 <lcdWrite>
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <lcdWriteData>:
 22a:	cf 93       	push	r28
 22c:	c8 2f       	mov	r28, r24
 22e:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <switchedTo4BitMode>
 232:	88 23       	and	r24, r24
 234:	69 f0       	breq	.+26     	; 0x250 <lcdWriteData+0x26>
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	8c 2f       	mov	r24, r28
 23c:	0e 94 b9 00 	call	0x172	; 0x172 <lcdWrite>
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	8c 2f       	mov	r24, r28
 246:	82 95       	swap	r24
 248:	80 7f       	andi	r24, 0xF0	; 240
 24a:	0e 94 b9 00 	call	0x172	; 0x172 <lcdWrite>
 24e:	06 c0       	rjmp	.+12     	; 0x25c <lcdWriteData+0x32>
 250:	40 91 90 00 	lds	r20, 0x0090	; 0x800090 <__data_end>
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	8c 2f       	mov	r24, r28
 258:	0e 94 b9 00 	call	0x172	; 0x172 <lcdWrite>
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <put>:
 260:	0e 94 15 01 	call	0x22a	; 0x22a <lcdWriteData>
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	08 95       	ret

0000026a <lcdGoToXY>:

void lcdGoToXY(uint8_t x, uint8_t y)
{
	lcdWriteCommand(LCD_COMMAND_SET_DDRAM_ADDRESS | (x + y * 0x40));
 26a:	90 e4       	ldi	r25, 0x40	; 64
 26c:	69 9f       	mul	r22, r25
 26e:	80 0d       	add	r24, r0
 270:	11 24       	eor	r1, r1
 272:	80 68       	ori	r24, 0x80	; 128
 274:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcdWriteCommand>
 278:	08 95       	ret

0000027a <lcdClear>:
}

void lcdClear()
{
	lcdWriteCommand(LCD_COMMAND_CLEAR);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcdWriteCommand>
 280:	08 95       	ret

00000282 <lcdInitPrintf>:
	return 0;
}

void lcdInitPrintf()
{
	fdevopen(put, NULL);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	80 e3       	ldi	r24, 0x30	; 48
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	0e 94 b4 02 	call	0x568	; 0x568 <fdevopen>
 28e:	08 95       	ret

00000290 <lcdInit>:
}

void lcdInit()
{
	switchedTo4BitMode = 0;
 290:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <switchedTo4BitMode>
	checkBusyFlag = 0;
 294:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__data_end>
	LCD_E_DDR |= (1 << LCD_E_PIN);
 298:	d0 9a       	sbi	0x1a, 0	; 26
	LCD_RW_DDR |= (1 << LCD_RW_PIN);
 29a:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_RS_DDR |= (1 << LCD_RS_PIN);
 29c:	d2 9a       	sbi	0x1a, 2	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29e:	85 ea       	ldi	r24, 0xA5	; 165
 2a0:	9e e0       	ldi	r25, 0x0E	; 14
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <lcdInit+0x12>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <lcdInit+0x18>
 2a8:	00 00       	nop
	_delay_ms(15);
	lcdWriteCommand(LCD_COMMAND_FUNCTION_SET | LCD_PARAM_FUNCTION_SET_8BIT);
 2aa:	80 e3       	ldi	r24, 0x30	; 48
 2ac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcdWriteCommand>
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	94 e0       	ldi	r25, 0x04	; 4
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcdInit+0x24>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcdInit+0x2a>
 2ba:	00 00       	nop
	_delay_ms(4.1);
	lcdWriteCommand(LCD_COMMAND_FUNCTION_SET | LCD_PARAM_FUNCTION_SET_8BIT);
 2bc:	80 e3       	ldi	r24, 0x30	; 48
 2be:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcdWriteCommand>
 2c2:	91 e2       	ldi	r25, 0x21	; 33
 2c4:	9a 95       	dec	r25
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcdInit+0x34>
 2c8:	00 00       	nop
	_delay_ms(0.1);
	lcdWriteCommand(LCD_COMMAND_FUNCTION_SET | LCD_PARAM_FUNCTION_SET_8BIT);
 2ca:	80 e3       	ldi	r24, 0x30	; 48
 2cc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcdWriteCommand>
 2d0:	89 ef       	ldi	r24, 0xF9	; 249
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <lcdInit+0x44>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <lcdInit+0x4a>
 2da:	00 00       	nop

	#ifdef BITS4
		_delay_ms(1);
		lcdWriteCommand(LCD_COMMAND_FUNCTION_SET);
 2dc:	80 e2       	ldi	r24, 0x20	; 32
 2de:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcdWriteCommand>
 2e2:	89 ef       	ldi	r24, 0xF9	; 249
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <lcdInit+0x56>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <lcdInit+0x5c>
 2ec:	00 00       	nop
		_delay_ms(1);
		switchedTo4BitMode = 1;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <switchedTo4BitMode>
		checkBusyFlag = 1;
 2f4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__data_end>
		lcdWriteCommand(LCD_COMMAND_FUNCTION_SET | LCD_PARAM_FUNCTION_SET_2LINES);
 2f8:	88 e2       	ldi	r24, 0x28	; 40
 2fa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcdWriteCommand>
	#else
		checkBusyFlag = 1;
		lcdWriteCommand(LCD_COMMAND_FUNCTION_SET | LCD_PARAM_FUNCTION_SET_8BIT | LCD_PARAM_FUNCTION_SET_2LINES);
	#endif
	lcdWriteCommand(LCD_COMMAND_ON_OFF);
 2fe:	88 e0       	ldi	r24, 0x08	; 8
 300:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcdWriteCommand>
	lcdWriteCommand(LCD_COMMAND_ON_OFF | LCD_PARAM_ON_OFF_DISPLAY);
 304:	8c e0       	ldi	r24, 0x0C	; 12
 306:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcdWriteCommand>
	lcdWriteCommand(LCD_COMMAND_ENTRY_MODE_SET | LCD_PARAM_ENTRY_MODE_SET_INCREMENT);
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcdWriteCommand>
	lcdWriteCommand(LCD_COMMAND_CLEAR);
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcdWriteCommand>
 316:	08 95       	ret

00000318 <main>:
#include "i2c/i2c.h"
#include "servos/PCA9685_servo.h"

int main(void)
{
	i2cInit();
 318:	0e 94 49 00 	call	0x92	; 0x92 <i2cInit>
	initServosI2C();
 31c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <initServosI2C>
	initUart();
 320:	0e 94 2d 02 	call	0x45a	; 0x45a <initUart>
	lcdInit();
 324:	0e 94 48 01 	call	0x290	; 0x290 <lcdInit>
	lcdInitPrintf();
 328:	0e 94 41 01 	call	0x282	; 0x282 <lcdInitPrintf>
	uint8_t init_val = uartReceive();
 32c:	0e 94 3a 02 	call	0x474	; 0x474 <uartReceive>
	while(init_val != 'i')
 330:	89 36       	cpi	r24, 0x69	; 105
 332:	21 f0       	breq	.+8      	; 0x33c <main+0x24>
		init_val = uartReceive();
 334:	0e 94 3a 02 	call	0x474	; 0x474 <uartReceive>
	initServosI2C();
	initUart();
	lcdInit();
	lcdInitPrintf();
	uint8_t init_val = uartReceive();
	while(init_val != 'i')
 338:	89 36       	cpi	r24, 0x69	; 105
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0x1c>
		init_val = uartReceive();
	uartTransmitString("READY");
 33c:	86 e6       	ldi	r24, 0x66	; 102
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 3e 02 	call	0x47c	; 0x47c <uartTransmitString>
	lcdClear();
 344:	0e 94 3d 01 	call	0x27a	; 0x27a <lcdClear>
	printf("READY");
 348:	86 e6       	ldi	r24, 0x66	; 102
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	9f 93       	push	r25
 34e:	8f 93       	push	r24
 350:	0e 94 ff 02 	call	0x5fe	; 0x5fe <printf>
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
				}
			}
			else
			{
				lcdClear();
				printf("servo error");
 358:	c3 e8       	ldi	r28, 0x83	; 131
 35a:	d0 e0       	ldi	r29, 0x00	; 0
				}
				else
				{
					lcdGoToXY(0,0);
					setServoPWM(servo, duty);
					printf("Servo %u:%u", servo, duty);
 35c:	0f 2e       	mov	r0, r31
 35e:	f7 e7       	ldi	r31, 0x77	; 119
 360:	af 2e       	mov	r10, r31
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	bf 2e       	mov	r11, r31
 366:	f0 2d       	mov	r31, r0
				uint16_t duty = 0;
				duty = uartReceiveIntAsChars(3);
				if(uartReceive() != '.')
				{
					lcdClear();
					printf("duty error");
 368:	0f 2e       	mov	r0, r31
 36a:	fc e6       	ldi	r31, 0x6C	; 108
 36c:	cf 2e       	mov	r12, r31
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	df 2e       	mov	r13, r31
 372:	f0 2d       	mov	r31, r0
		//uint16_t servo = uartReceiveIntAsChars(1);
		//uint16_t duty = uartReceiveIntAsChars(3);
		//setServoPWM(servo, duty);
		//lcdClear();
		//printf("Servo %u:%u", servo, duty);
		uint8_t command = uartReceive();
 374:	0e 94 3a 02 	call	0x474	; 0x474 <uartReceive>
		if(command == 's')
 378:	83 37       	cpi	r24, 0x73	; 115
 37a:	e1 f7       	brne	.-8      	; 0x374 <main+0x5c>
		{
			uint16_t servo = 0;
			servo = uartReceiveIntAsChars(1);
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <uartReceiveIntAsChars>
 382:	18 2f       	mov	r17, r24
 384:	09 2f       	mov	r16, r25
			if(uartReceive() == '.')
 386:	0e 94 3a 02 	call	0x474	; 0x474 <uartReceive>
 38a:	8e 32       	cpi	r24, 0x2E	; 46
 38c:	51 f5       	brne	.+84     	; 0x3e2 <main+0xca>
			{
				uint16_t duty = 0;
				duty = uartReceiveIntAsChars(3);
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	0e 94 54 02 	call	0x4a8	; 0x4a8 <uartReceiveIntAsChars>
 394:	f8 2e       	mov	r15, r24
 396:	e9 2e       	mov	r14, r25
				if(uartReceive() != '.')
 398:	0e 94 3a 02 	call	0x474	; 0x474 <uartReceive>
 39c:	8e 32       	cpi	r24, 0x2E	; 46
 39e:	49 f0       	breq	.+18     	; 0x3b2 <main+0x9a>
				{
					lcdClear();
 3a0:	0e 94 3d 01 	call	0x27a	; 0x27a <lcdClear>
					printf("duty error");
 3a4:	df 92       	push	r13
 3a6:	cf 92       	push	r12
 3a8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <printf>
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	e1 cf       	rjmp	.-62     	; 0x374 <main+0x5c>
				}
				else
				{
					lcdGoToXY(0,0);
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	0e 94 35 01 	call	0x26a	; 0x26a <lcdGoToXY>
					setServoPWM(servo, duty);
 3ba:	6f 2d       	mov	r22, r15
 3bc:	7e 2d       	mov	r23, r14
 3be:	81 2f       	mov	r24, r17
 3c0:	0e 94 13 02 	call	0x426	; 0x426 <setServoPWM>
					printf("Servo %u:%u", servo, duty);
 3c4:	ef 92       	push	r14
 3c6:	ff 92       	push	r15
 3c8:	0f 93       	push	r16
 3ca:	1f 93       	push	r17
 3cc:	bf 92       	push	r11
 3ce:	af 92       	push	r10
 3d0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <printf>
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	c9 cf       	rjmp	.-110    	; 0x374 <main+0x5c>
				}
			}
			else
			{
				lcdClear();
 3e2:	0e 94 3d 01 	call	0x27a	; 0x27a <lcdClear>
				printf("servo error");
 3e6:	df 93       	push	r29
 3e8:	cf 93       	push	r28
 3ea:	0e 94 ff 02 	call	0x5fe	; 0x5fe <printf>
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	c0 cf       	rjmp	.-128    	; 0x374 <main+0x5c>

000003f4 <initServosI2C>:
#include "../i2c/i2c.h"
#include <util/delay.h>

void initServosI2C()
{
	i2cInit();
 3f4:	0e 94 49 00 	call	0x92	; 0x92 <i2cInit>
 3f8:	81 ee       	ldi	r24, 0xE1	; 225
 3fa:	94 e0       	ldi	r25, 0x04	; 4
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <initServosI2C+0x8>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	00 00       	nop
	_delay_ms(5);
	i2cWriteRegister(PCA9685_I2C_ADDR, PCA9685_PRE_SCALE, 0x79);
 404:	49 e7       	ldi	r20, 0x79	; 121
 406:	6e ef       	ldi	r22, 0xFE	; 254
 408:	80 e4       	ldi	r24, 0x40	; 64
 40a:	0e 94 88 00 	call	0x110	; 0x110 <i2cWriteRegister>
	i2cWriteRegister(PCA9685_I2C_ADDR, PCA9685_MODE1, 0b00000001);
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	80 e4       	ldi	r24, 0x40	; 64
 414:	0e 94 88 00 	call	0x110	; 0x110 <i2cWriteRegister>
 418:	81 ee       	ldi	r24, 0xE1	; 225
 41a:	94 e0       	ldi	r25, 0x04	; 4
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 422:	00 00       	nop
 424:	08 95       	ret

00000426 <setServoPWM>:
	_delay_ms(5);
}

void setServoPWM(uint8_t servo, uint16_t duty)
{
 426:	0f 93       	push	r16
 428:	1f 93       	push	r17
 42a:	cf 93       	push	r28
 42c:	c8 2f       	mov	r28, r24
	uint8_t reg_low = 0x08 + servo * 4;
	uint8_t reg_high = 0x09 + servo * 4;
	duty &= 0x0fff;
 42e:	8b 01       	movw	r16, r22
 430:	1f 70       	andi	r17, 0x0F	; 15
	i2cWriteRegister(PCA9685_I2C_ADDR, reg_low, (uint8_t)duty);
 432:	68 2f       	mov	r22, r24
 434:	66 0f       	add	r22, r22
 436:	66 0f       	add	r22, r22
 438:	68 5f       	subi	r22, 0xF8	; 248
 43a:	40 2f       	mov	r20, r16
 43c:	80 e4       	ldi	r24, 0x40	; 64
 43e:	0e 94 88 00 	call	0x110	; 0x110 <i2cWriteRegister>
	i2cWriteRegister(PCA9685_I2C_ADDR, reg_high, (uint8_t)(duty >> 8));
 442:	cc 0f       	add	r28, r28
 444:	cc 0f       	add	r28, r28
 446:	69 e0       	ldi	r22, 0x09	; 9
 448:	6c 0f       	add	r22, r28
 44a:	41 2f       	mov	r20, r17
 44c:	80 e4       	ldi	r24, 0x40	; 64
 44e:	0e 94 88 00 	call	0x110	; 0x110 <i2cWriteRegister>
}
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	08 95       	ret

0000045a <initUart>:
#include <stdlib.h>
#include "uart.h"

void initUart()
{
	UBRRH = (uint8_t) (UBRR_VAL >> 8);
 45a:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t) (UBRR_VAL);
 45c:	8c e0       	ldi	r24, 0x0C	; 12
 45e:	89 b9       	out	0x09, r24	; 9
	#ifdef DOUBLE_BAUD
		UCSRA |= (1 << U2X);
 460:	59 9a       	sbi	0x0b, 1	; 11
	#endif
	UCSRB = (1 << RXEN) | (1 << TXEN);
 462:	88 e1       	ldi	r24, 0x18	; 24
 464:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 466:	86 e8       	ldi	r24, 0x86	; 134
 468:	80 bd       	out	0x20, r24	; 32
 46a:	08 95       	ret

0000046c <uartTransmit>:
}

void uartTransmit(uint8_t data)
{
	while(!(UCSRA & (1 << UDRE)));
 46c:	5d 9b       	sbis	0x0b, 5	; 11
 46e:	fe cf       	rjmp	.-4      	; 0x46c <uartTransmit>
	UDR = data;
 470:	8c b9       	out	0x0c, r24	; 12
 472:	08 95       	ret

00000474 <uartReceive>:
}

uint8_t uartReceive()
{
	while(!(UCSRA & (1 << RXC)));
 474:	5f 9b       	sbis	0x0b, 7	; 11
 476:	fe cf       	rjmp	.-4      	; 0x474 <uartReceive>
	return UDR;
 478:	8c b1       	in	r24, 0x0c	; 12
}
 47a:	08 95       	ret

0000047c <uartTransmitString>:

void uartTransmitString(char* str)
{
 47c:	0f 93       	push	r16
 47e:	1f 93       	push	r17
 480:	cf 93       	push	r28
 482:	fc 01       	movw	r30, r24
	uint8_t cnt = 0;
	while(str[cnt] != '\0')
 484:	80 81       	ld	r24, Z
 486:	88 23       	and	r24, r24
 488:	59 f0       	breq	.+22     	; 0x4a0 <uartTransmitString+0x24>
 48a:	8f 01       	movw	r16, r30
 48c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		uartTransmit(str[cnt++]);
 48e:	cf 5f       	subi	r28, 0xFF	; 255
 490:	0e 94 36 02 	call	0x46c	; 0x46c <uartTransmit>
}

void uartTransmitString(char* str)
{
	uint8_t cnt = 0;
	while(str[cnt] != '\0')
 494:	f8 01       	movw	r30, r16
 496:	ec 0f       	add	r30, r28
 498:	f1 1d       	adc	r31, r1
 49a:	80 81       	ld	r24, Z
 49c:	81 11       	cpse	r24, r1
 49e:	f7 cf       	rjmp	.-18     	; 0x48e <uartTransmitString+0x12>
	{
		uartTransmit(str[cnt++]);
	}
}
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	08 95       	ret

000004a8 <uartReceiveIntAsChars>:

uint16_t uartReceiveIntAsChars(uint8_t width)
{
 4a8:	cf 92       	push	r12
 4aa:	df 92       	push	r13
 4ac:	ef 92       	push	r14
 4ae:	ff 92       	push	r15
 4b0:	0f 93       	push	r16
 4b2:	1f 93       	push	r17
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	00 d0       	rcall	.+0      	; 0x4ba <uartReceiveIntAsChars+0x12>
 4ba:	00 d0       	rcall	.+0      	; 0x4bc <uartReceiveIntAsChars+0x14>
 4bc:	00 d0       	rcall	.+0      	; 0x4be <uartReceiveIntAsChars+0x16>
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62
	char num[6];
	for (int i = 0; i < width; i++)
 4c2:	c8 2e       	mov	r12, r24
 4c4:	d1 2c       	mov	r13, r1
 4c6:	1c 14       	cp	r1, r12
 4c8:	1d 04       	cpc	r1, r13
 4ca:	74 f4       	brge	.+28     	; 0x4e8 <uartReceiveIntAsChars+0x40>
 4cc:	8e 01       	movw	r16, r28
 4ce:	0f 5f       	subi	r16, 0xFF	; 255
 4d0:	1f 4f       	sbci	r17, 0xFF	; 255
 4d2:	78 01       	movw	r14, r16
 4d4:	e8 0e       	add	r14, r24
 4d6:	f1 1c       	adc	r15, r1
	{
		num[i] = uartReceive();
 4d8:	0e 94 3a 02 	call	0x474	; 0x474 <uartReceive>
 4dc:	f8 01       	movw	r30, r16
 4de:	81 93       	st	Z+, r24
 4e0:	8f 01       	movw	r16, r30
}

uint16_t uartReceiveIntAsChars(uint8_t width)
{
	char num[6];
	for (int i = 0; i < width; i++)
 4e2:	ee 15       	cp	r30, r14
 4e4:	ff 05       	cpc	r31, r15
 4e6:	c1 f7       	brne	.-16     	; 0x4d8 <uartReceiveIntAsChars+0x30>
	{
		num[i] = uartReceive();
	}
	num[width] = '\0';
 4e8:	e1 e0       	ldi	r30, 0x01	; 1
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	ec 0f       	add	r30, r28
 4ee:	fd 1f       	adc	r31, r29
 4f0:	ec 0d       	add	r30, r12
 4f2:	fd 1d       	adc	r31, r13
 4f4:	10 82       	st	Z, r1
	return atoi(num);
 4f6:	ce 01       	movw	r24, r28
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	0e 94 8e 02 	call	0x51c	; 0x51c <atoi>
}
 4fe:	26 96       	adiw	r28, 0x06	; 6
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	ff 90       	pop	r15
 514:	ef 90       	pop	r14
 516:	df 90       	pop	r13
 518:	cf 90       	pop	r12
 51a:	08 95       	ret

0000051c <atoi>:
 51c:	fc 01       	movw	r30, r24
 51e:	88 27       	eor	r24, r24
 520:	99 27       	eor	r25, r25
 522:	e8 94       	clt
 524:	21 91       	ld	r18, Z+
 526:	20 32       	cpi	r18, 0x20	; 32
 528:	e9 f3       	breq	.-6      	; 0x524 <atoi+0x8>
 52a:	29 30       	cpi	r18, 0x09	; 9
 52c:	10 f0       	brcs	.+4      	; 0x532 <atoi+0x16>
 52e:	2e 30       	cpi	r18, 0x0E	; 14
 530:	c8 f3       	brcs	.-14     	; 0x524 <atoi+0x8>
 532:	2b 32       	cpi	r18, 0x2B	; 43
 534:	41 f0       	breq	.+16     	; 0x546 <atoi+0x2a>
 536:	2d 32       	cpi	r18, 0x2D	; 45
 538:	39 f4       	brne	.+14     	; 0x548 <atoi+0x2c>
 53a:	68 94       	set
 53c:	04 c0       	rjmp	.+8      	; 0x546 <atoi+0x2a>
 53e:	0e 94 ac 02 	call	0x558	; 0x558 <__mulhi_const_10>
 542:	82 0f       	add	r24, r18
 544:	91 1d       	adc	r25, r1
 546:	21 91       	ld	r18, Z+
 548:	20 53       	subi	r18, 0x30	; 48
 54a:	2a 30       	cpi	r18, 0x0A	; 10
 54c:	c0 f3       	brcs	.-16     	; 0x53e <atoi+0x22>
 54e:	1e f4       	brtc	.+6      	; 0x556 <atoi+0x3a>
 550:	90 95       	com	r25
 552:	81 95       	neg	r24
 554:	9f 4f       	sbci	r25, 0xFF	; 255
 556:	08 95       	ret

00000558 <__mulhi_const_10>:
 558:	7a e0       	ldi	r23, 0x0A	; 10
 55a:	97 9f       	mul	r25, r23
 55c:	90 2d       	mov	r25, r0
 55e:	87 9f       	mul	r24, r23
 560:	80 2d       	mov	r24, r0
 562:	91 0d       	add	r25, r1
 564:	11 24       	eor	r1, r1
 566:	08 95       	ret

00000568 <fdevopen>:
 568:	0f 93       	push	r16
 56a:	1f 93       	push	r17
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	00 97       	sbiw	r24, 0x00	; 0
 572:	31 f4       	brne	.+12     	; 0x580 <fdevopen+0x18>
 574:	61 15       	cp	r22, r1
 576:	71 05       	cpc	r23, r1
 578:	19 f4       	brne	.+6      	; 0x580 <fdevopen+0x18>
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	3a c0       	rjmp	.+116    	; 0x5f4 <fdevopen+0x8c>
 580:	8b 01       	movw	r16, r22
 582:	ec 01       	movw	r28, r24
 584:	6e e0       	ldi	r22, 0x0E	; 14
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <calloc>
 590:	fc 01       	movw	r30, r24
 592:	89 2b       	or	r24, r25
 594:	91 f3       	breq	.-28     	; 0x57a <fdevopen+0x12>
 596:	80 e8       	ldi	r24, 0x80	; 128
 598:	83 83       	std	Z+3, r24	; 0x03
 59a:	01 15       	cp	r16, r1
 59c:	11 05       	cpc	r17, r1
 59e:	71 f0       	breq	.+28     	; 0x5bc <fdevopen+0x54>
 5a0:	13 87       	std	Z+11, r17	; 0x0b
 5a2:	02 87       	std	Z+10, r16	; 0x0a
 5a4:	81 e8       	ldi	r24, 0x81	; 129
 5a6:	83 83       	std	Z+3, r24	; 0x03
 5a8:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__iob>
 5ac:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <__iob+0x1>
 5b0:	89 2b       	or	r24, r25
 5b2:	21 f4       	brne	.+8      	; 0x5bc <fdevopen+0x54>
 5b4:	f0 93 93 00 	sts	0x0093, r31	; 0x800093 <__iob+0x1>
 5b8:	e0 93 92 00 	sts	0x0092, r30	; 0x800092 <__iob>
 5bc:	20 97       	sbiw	r28, 0x00	; 0
 5be:	c9 f0       	breq	.+50     	; 0x5f2 <fdevopen+0x8a>
 5c0:	d1 87       	std	Z+9, r29	; 0x09
 5c2:	c0 87       	std	Z+8, r28	; 0x08
 5c4:	83 81       	ldd	r24, Z+3	; 0x03
 5c6:	82 60       	ori	r24, 0x02	; 2
 5c8:	83 83       	std	Z+3, r24	; 0x03
 5ca:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__iob+0x2>
 5ce:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__iob+0x3>
 5d2:	89 2b       	or	r24, r25
 5d4:	71 f4       	brne	.+28     	; 0x5f2 <fdevopen+0x8a>
 5d6:	f0 93 95 00 	sts	0x0095, r31	; 0x800095 <__iob+0x3>
 5da:	e0 93 94 00 	sts	0x0094, r30	; 0x800094 <__iob+0x2>
 5de:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__iob+0x4>
 5e2:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__iob+0x5>
 5e6:	89 2b       	or	r24, r25
 5e8:	21 f4       	brne	.+8      	; 0x5f2 <fdevopen+0x8a>
 5ea:	f0 93 97 00 	sts	0x0097, r31	; 0x800097 <__iob+0x5>
 5ee:	e0 93 96 00 	sts	0x0096, r30	; 0x800096 <__iob+0x4>
 5f2:	cf 01       	movw	r24, r30
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	1f 91       	pop	r17
 5fa:	0f 91       	pop	r16
 5fc:	08 95       	ret

000005fe <printf>:
 5fe:	a0 e0       	ldi	r26, 0x00	; 0
 600:	b0 e0       	ldi	r27, 0x00	; 0
 602:	e5 e0       	ldi	r30, 0x05	; 5
 604:	f3 e0       	ldi	r31, 0x03	; 3
 606:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__prologue_saves__+0x20>
 60a:	ae 01       	movw	r20, r28
 60c:	4b 5f       	subi	r20, 0xFB	; 251
 60e:	5f 4f       	sbci	r21, 0xFF	; 255
 610:	fa 01       	movw	r30, r20
 612:	61 91       	ld	r22, Z+
 614:	71 91       	ld	r23, Z+
 616:	af 01       	movw	r20, r30
 618:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__iob+0x2>
 61c:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__iob+0x3>
 620:	0e 94 15 03 	call	0x62a	; 0x62a <vfprintf>
 624:	e2 e0       	ldi	r30, 0x02	; 2
 626:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__epilogue_restores__+0x20>

0000062a <vfprintf>:
 62a:	ab e0       	ldi	r26, 0x0B	; 11
 62c:	b0 e0       	ldi	r27, 0x00	; 0
 62e:	eb e1       	ldi	r30, 0x1B	; 27
 630:	f3 e0       	ldi	r31, 0x03	; 3
 632:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__prologue_saves__>
 636:	6c 01       	movw	r12, r24
 638:	7b 01       	movw	r14, r22
 63a:	8a 01       	movw	r16, r20
 63c:	fc 01       	movw	r30, r24
 63e:	17 82       	std	Z+7, r1	; 0x07
 640:	16 82       	std	Z+6, r1	; 0x06
 642:	83 81       	ldd	r24, Z+3	; 0x03
 644:	81 ff       	sbrs	r24, 1
 646:	cc c1       	rjmp	.+920    	; 0x9e0 <__stack+0x181>
 648:	ce 01       	movw	r24, r28
 64a:	01 96       	adiw	r24, 0x01	; 1
 64c:	3c 01       	movw	r6, r24
 64e:	f6 01       	movw	r30, r12
 650:	93 81       	ldd	r25, Z+3	; 0x03
 652:	f7 01       	movw	r30, r14
 654:	93 fd       	sbrc	r25, 3
 656:	85 91       	lpm	r24, Z+
 658:	93 ff       	sbrs	r25, 3
 65a:	81 91       	ld	r24, Z+
 65c:	7f 01       	movw	r14, r30
 65e:	88 23       	and	r24, r24
 660:	09 f4       	brne	.+2      	; 0x664 <vfprintf+0x3a>
 662:	ba c1       	rjmp	.+884    	; 0x9d8 <__stack+0x179>
 664:	85 32       	cpi	r24, 0x25	; 37
 666:	39 f4       	brne	.+14     	; 0x676 <vfprintf+0x4c>
 668:	93 fd       	sbrc	r25, 3
 66a:	85 91       	lpm	r24, Z+
 66c:	93 ff       	sbrs	r25, 3
 66e:	81 91       	ld	r24, Z+
 670:	7f 01       	movw	r14, r30
 672:	85 32       	cpi	r24, 0x25	; 37
 674:	29 f4       	brne	.+10     	; 0x680 <vfprintf+0x56>
 676:	b6 01       	movw	r22, r12
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 67e:	e7 cf       	rjmp	.-50     	; 0x64e <vfprintf+0x24>
 680:	91 2c       	mov	r9, r1
 682:	21 2c       	mov	r2, r1
 684:	31 2c       	mov	r3, r1
 686:	ff e1       	ldi	r31, 0x1F	; 31
 688:	f3 15       	cp	r31, r3
 68a:	d8 f0       	brcs	.+54     	; 0x6c2 <vfprintf+0x98>
 68c:	8b 32       	cpi	r24, 0x2B	; 43
 68e:	79 f0       	breq	.+30     	; 0x6ae <vfprintf+0x84>
 690:	38 f4       	brcc	.+14     	; 0x6a0 <vfprintf+0x76>
 692:	80 32       	cpi	r24, 0x20	; 32
 694:	79 f0       	breq	.+30     	; 0x6b4 <vfprintf+0x8a>
 696:	83 32       	cpi	r24, 0x23	; 35
 698:	a1 f4       	brne	.+40     	; 0x6c2 <vfprintf+0x98>
 69a:	23 2d       	mov	r18, r3
 69c:	20 61       	ori	r18, 0x10	; 16
 69e:	1d c0       	rjmp	.+58     	; 0x6da <vfprintf+0xb0>
 6a0:	8d 32       	cpi	r24, 0x2D	; 45
 6a2:	61 f0       	breq	.+24     	; 0x6bc <vfprintf+0x92>
 6a4:	80 33       	cpi	r24, 0x30	; 48
 6a6:	69 f4       	brne	.+26     	; 0x6c2 <vfprintf+0x98>
 6a8:	23 2d       	mov	r18, r3
 6aa:	21 60       	ori	r18, 0x01	; 1
 6ac:	16 c0       	rjmp	.+44     	; 0x6da <vfprintf+0xb0>
 6ae:	83 2d       	mov	r24, r3
 6b0:	82 60       	ori	r24, 0x02	; 2
 6b2:	38 2e       	mov	r3, r24
 6b4:	e3 2d       	mov	r30, r3
 6b6:	e4 60       	ori	r30, 0x04	; 4
 6b8:	3e 2e       	mov	r3, r30
 6ba:	2a c0       	rjmp	.+84     	; 0x710 <vfprintf+0xe6>
 6bc:	f3 2d       	mov	r31, r3
 6be:	f8 60       	ori	r31, 0x08	; 8
 6c0:	1d c0       	rjmp	.+58     	; 0x6fc <vfprintf+0xd2>
 6c2:	37 fc       	sbrc	r3, 7
 6c4:	2d c0       	rjmp	.+90     	; 0x720 <vfprintf+0xf6>
 6c6:	20 ed       	ldi	r18, 0xD0	; 208
 6c8:	28 0f       	add	r18, r24
 6ca:	2a 30       	cpi	r18, 0x0A	; 10
 6cc:	40 f0       	brcs	.+16     	; 0x6de <vfprintf+0xb4>
 6ce:	8e 32       	cpi	r24, 0x2E	; 46
 6d0:	b9 f4       	brne	.+46     	; 0x700 <vfprintf+0xd6>
 6d2:	36 fc       	sbrc	r3, 6
 6d4:	81 c1       	rjmp	.+770    	; 0x9d8 <__stack+0x179>
 6d6:	23 2d       	mov	r18, r3
 6d8:	20 64       	ori	r18, 0x40	; 64
 6da:	32 2e       	mov	r3, r18
 6dc:	19 c0       	rjmp	.+50     	; 0x710 <vfprintf+0xe6>
 6de:	36 fe       	sbrs	r3, 6
 6e0:	06 c0       	rjmp	.+12     	; 0x6ee <vfprintf+0xc4>
 6e2:	8a e0       	ldi	r24, 0x0A	; 10
 6e4:	98 9e       	mul	r9, r24
 6e6:	20 0d       	add	r18, r0
 6e8:	11 24       	eor	r1, r1
 6ea:	92 2e       	mov	r9, r18
 6ec:	11 c0       	rjmp	.+34     	; 0x710 <vfprintf+0xe6>
 6ee:	ea e0       	ldi	r30, 0x0A	; 10
 6f0:	2e 9e       	mul	r2, r30
 6f2:	20 0d       	add	r18, r0
 6f4:	11 24       	eor	r1, r1
 6f6:	22 2e       	mov	r2, r18
 6f8:	f3 2d       	mov	r31, r3
 6fa:	f0 62       	ori	r31, 0x20	; 32
 6fc:	3f 2e       	mov	r3, r31
 6fe:	08 c0       	rjmp	.+16     	; 0x710 <vfprintf+0xe6>
 700:	8c 36       	cpi	r24, 0x6C	; 108
 702:	21 f4       	brne	.+8      	; 0x70c <vfprintf+0xe2>
 704:	83 2d       	mov	r24, r3
 706:	80 68       	ori	r24, 0x80	; 128
 708:	38 2e       	mov	r3, r24
 70a:	02 c0       	rjmp	.+4      	; 0x710 <vfprintf+0xe6>
 70c:	88 36       	cpi	r24, 0x68	; 104
 70e:	41 f4       	brne	.+16     	; 0x720 <vfprintf+0xf6>
 710:	f7 01       	movw	r30, r14
 712:	93 fd       	sbrc	r25, 3
 714:	85 91       	lpm	r24, Z+
 716:	93 ff       	sbrs	r25, 3
 718:	81 91       	ld	r24, Z+
 71a:	7f 01       	movw	r14, r30
 71c:	81 11       	cpse	r24, r1
 71e:	b3 cf       	rjmp	.-154    	; 0x686 <vfprintf+0x5c>
 720:	98 2f       	mov	r25, r24
 722:	9f 7d       	andi	r25, 0xDF	; 223
 724:	95 54       	subi	r25, 0x45	; 69
 726:	93 30       	cpi	r25, 0x03	; 3
 728:	28 f4       	brcc	.+10     	; 0x734 <vfprintf+0x10a>
 72a:	0c 5f       	subi	r16, 0xFC	; 252
 72c:	1f 4f       	sbci	r17, 0xFF	; 255
 72e:	9f e3       	ldi	r25, 0x3F	; 63
 730:	99 83       	std	Y+1, r25	; 0x01
 732:	0d c0       	rjmp	.+26     	; 0x74e <vfprintf+0x124>
 734:	83 36       	cpi	r24, 0x63	; 99
 736:	31 f0       	breq	.+12     	; 0x744 <vfprintf+0x11a>
 738:	83 37       	cpi	r24, 0x73	; 115
 73a:	71 f0       	breq	.+28     	; 0x758 <vfprintf+0x12e>
 73c:	83 35       	cpi	r24, 0x53	; 83
 73e:	09 f0       	breq	.+2      	; 0x742 <vfprintf+0x118>
 740:	59 c0       	rjmp	.+178    	; 0x7f4 <vfprintf+0x1ca>
 742:	21 c0       	rjmp	.+66     	; 0x786 <vfprintf+0x15c>
 744:	f8 01       	movw	r30, r16
 746:	80 81       	ld	r24, Z
 748:	89 83       	std	Y+1, r24	; 0x01
 74a:	0e 5f       	subi	r16, 0xFE	; 254
 74c:	1f 4f       	sbci	r17, 0xFF	; 255
 74e:	88 24       	eor	r8, r8
 750:	83 94       	inc	r8
 752:	91 2c       	mov	r9, r1
 754:	53 01       	movw	r10, r6
 756:	13 c0       	rjmp	.+38     	; 0x77e <vfprintf+0x154>
 758:	28 01       	movw	r4, r16
 75a:	f2 e0       	ldi	r31, 0x02	; 2
 75c:	4f 0e       	add	r4, r31
 75e:	51 1c       	adc	r5, r1
 760:	f8 01       	movw	r30, r16
 762:	a0 80       	ld	r10, Z
 764:	b1 80       	ldd	r11, Z+1	; 0x01
 766:	36 fe       	sbrs	r3, 6
 768:	03 c0       	rjmp	.+6      	; 0x770 <vfprintf+0x146>
 76a:	69 2d       	mov	r22, r9
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <vfprintf+0x14a>
 770:	6f ef       	ldi	r22, 0xFF	; 255
 772:	7f ef       	ldi	r23, 0xFF	; 255
 774:	c5 01       	movw	r24, r10
 776:	0e 94 45 06 	call	0xc8a	; 0xc8a <strnlen>
 77a:	4c 01       	movw	r8, r24
 77c:	82 01       	movw	r16, r4
 77e:	f3 2d       	mov	r31, r3
 780:	ff 77       	andi	r31, 0x7F	; 127
 782:	3f 2e       	mov	r3, r31
 784:	16 c0       	rjmp	.+44     	; 0x7b2 <vfprintf+0x188>
 786:	28 01       	movw	r4, r16
 788:	22 e0       	ldi	r18, 0x02	; 2
 78a:	42 0e       	add	r4, r18
 78c:	51 1c       	adc	r5, r1
 78e:	f8 01       	movw	r30, r16
 790:	a0 80       	ld	r10, Z
 792:	b1 80       	ldd	r11, Z+1	; 0x01
 794:	36 fe       	sbrs	r3, 6
 796:	03 c0       	rjmp	.+6      	; 0x79e <vfprintf+0x174>
 798:	69 2d       	mov	r22, r9
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <vfprintf+0x178>
 79e:	6f ef       	ldi	r22, 0xFF	; 255
 7a0:	7f ef       	ldi	r23, 0xFF	; 255
 7a2:	c5 01       	movw	r24, r10
 7a4:	0e 94 33 06 	call	0xc66	; 0xc66 <strnlen_P>
 7a8:	4c 01       	movw	r8, r24
 7aa:	f3 2d       	mov	r31, r3
 7ac:	f0 68       	ori	r31, 0x80	; 128
 7ae:	3f 2e       	mov	r3, r31
 7b0:	82 01       	movw	r16, r4
 7b2:	33 fc       	sbrc	r3, 3
 7b4:	1b c0       	rjmp	.+54     	; 0x7ec <vfprintf+0x1c2>
 7b6:	82 2d       	mov	r24, r2
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	88 16       	cp	r8, r24
 7bc:	99 06       	cpc	r9, r25
 7be:	b0 f4       	brcc	.+44     	; 0x7ec <vfprintf+0x1c2>
 7c0:	b6 01       	movw	r22, r12
 7c2:	80 e2       	ldi	r24, 0x20	; 32
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 7ca:	2a 94       	dec	r2
 7cc:	f4 cf       	rjmp	.-24     	; 0x7b6 <vfprintf+0x18c>
 7ce:	f5 01       	movw	r30, r10
 7d0:	37 fc       	sbrc	r3, 7
 7d2:	85 91       	lpm	r24, Z+
 7d4:	37 fe       	sbrs	r3, 7
 7d6:	81 91       	ld	r24, Z+
 7d8:	5f 01       	movw	r10, r30
 7da:	b6 01       	movw	r22, r12
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 7e2:	21 10       	cpse	r2, r1
 7e4:	2a 94       	dec	r2
 7e6:	21 e0       	ldi	r18, 0x01	; 1
 7e8:	82 1a       	sub	r8, r18
 7ea:	91 08       	sbc	r9, r1
 7ec:	81 14       	cp	r8, r1
 7ee:	91 04       	cpc	r9, r1
 7f0:	71 f7       	brne	.-36     	; 0x7ce <vfprintf+0x1a4>
 7f2:	e8 c0       	rjmp	.+464    	; 0x9c4 <__stack+0x165>
 7f4:	84 36       	cpi	r24, 0x64	; 100
 7f6:	11 f0       	breq	.+4      	; 0x7fc <vfprintf+0x1d2>
 7f8:	89 36       	cpi	r24, 0x69	; 105
 7fa:	41 f5       	brne	.+80     	; 0x84c <vfprintf+0x222>
 7fc:	f8 01       	movw	r30, r16
 7fe:	37 fe       	sbrs	r3, 7
 800:	07 c0       	rjmp	.+14     	; 0x810 <vfprintf+0x1e6>
 802:	60 81       	ld	r22, Z
 804:	71 81       	ldd	r23, Z+1	; 0x01
 806:	82 81       	ldd	r24, Z+2	; 0x02
 808:	93 81       	ldd	r25, Z+3	; 0x03
 80a:	0c 5f       	subi	r16, 0xFC	; 252
 80c:	1f 4f       	sbci	r17, 0xFF	; 255
 80e:	08 c0       	rjmp	.+16     	; 0x820 <vfprintf+0x1f6>
 810:	60 81       	ld	r22, Z
 812:	71 81       	ldd	r23, Z+1	; 0x01
 814:	07 2e       	mov	r0, r23
 816:	00 0c       	add	r0, r0
 818:	88 0b       	sbc	r24, r24
 81a:	99 0b       	sbc	r25, r25
 81c:	0e 5f       	subi	r16, 0xFE	; 254
 81e:	1f 4f       	sbci	r17, 0xFF	; 255
 820:	f3 2d       	mov	r31, r3
 822:	ff 76       	andi	r31, 0x6F	; 111
 824:	3f 2e       	mov	r3, r31
 826:	97 ff       	sbrs	r25, 7
 828:	09 c0       	rjmp	.+18     	; 0x83c <vfprintf+0x212>
 82a:	90 95       	com	r25
 82c:	80 95       	com	r24
 82e:	70 95       	com	r23
 830:	61 95       	neg	r22
 832:	7f 4f       	sbci	r23, 0xFF	; 255
 834:	8f 4f       	sbci	r24, 0xFF	; 255
 836:	9f 4f       	sbci	r25, 0xFF	; 255
 838:	f0 68       	ori	r31, 0x80	; 128
 83a:	3f 2e       	mov	r3, r31
 83c:	2a e0       	ldi	r18, 0x0A	; 10
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	a3 01       	movw	r20, r6
 842:	0e 94 8c 06 	call	0xd18	; 0xd18 <__ultoa_invert>
 846:	88 2e       	mov	r8, r24
 848:	86 18       	sub	r8, r6
 84a:	45 c0       	rjmp	.+138    	; 0x8d6 <__stack+0x77>
 84c:	85 37       	cpi	r24, 0x75	; 117
 84e:	31 f4       	brne	.+12     	; 0x85c <vfprintf+0x232>
 850:	23 2d       	mov	r18, r3
 852:	2f 7e       	andi	r18, 0xEF	; 239
 854:	b2 2e       	mov	r11, r18
 856:	2a e0       	ldi	r18, 0x0A	; 10
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	25 c0       	rjmp	.+74     	; 0x8a6 <__stack+0x47>
 85c:	93 2d       	mov	r25, r3
 85e:	99 7f       	andi	r25, 0xF9	; 249
 860:	b9 2e       	mov	r11, r25
 862:	8f 36       	cpi	r24, 0x6F	; 111
 864:	c1 f0       	breq	.+48     	; 0x896 <__stack+0x37>
 866:	18 f4       	brcc	.+6      	; 0x86e <__stack+0xf>
 868:	88 35       	cpi	r24, 0x58	; 88
 86a:	79 f0       	breq	.+30     	; 0x88a <__stack+0x2b>
 86c:	b5 c0       	rjmp	.+362    	; 0x9d8 <__stack+0x179>
 86e:	80 37       	cpi	r24, 0x70	; 112
 870:	19 f0       	breq	.+6      	; 0x878 <__stack+0x19>
 872:	88 37       	cpi	r24, 0x78	; 120
 874:	21 f0       	breq	.+8      	; 0x87e <__stack+0x1f>
 876:	b0 c0       	rjmp	.+352    	; 0x9d8 <__stack+0x179>
 878:	e9 2f       	mov	r30, r25
 87a:	e0 61       	ori	r30, 0x10	; 16
 87c:	be 2e       	mov	r11, r30
 87e:	b4 fe       	sbrs	r11, 4
 880:	0d c0       	rjmp	.+26     	; 0x89c <__stack+0x3d>
 882:	fb 2d       	mov	r31, r11
 884:	f4 60       	ori	r31, 0x04	; 4
 886:	bf 2e       	mov	r11, r31
 888:	09 c0       	rjmp	.+18     	; 0x89c <__stack+0x3d>
 88a:	34 fe       	sbrs	r3, 4
 88c:	0a c0       	rjmp	.+20     	; 0x8a2 <__stack+0x43>
 88e:	29 2f       	mov	r18, r25
 890:	26 60       	ori	r18, 0x06	; 6
 892:	b2 2e       	mov	r11, r18
 894:	06 c0       	rjmp	.+12     	; 0x8a2 <__stack+0x43>
 896:	28 e0       	ldi	r18, 0x08	; 8
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	05 c0       	rjmp	.+10     	; 0x8a6 <__stack+0x47>
 89c:	20 e1       	ldi	r18, 0x10	; 16
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__stack+0x47>
 8a2:	20 e1       	ldi	r18, 0x10	; 16
 8a4:	32 e0       	ldi	r19, 0x02	; 2
 8a6:	f8 01       	movw	r30, r16
 8a8:	b7 fe       	sbrs	r11, 7
 8aa:	07 c0       	rjmp	.+14     	; 0x8ba <__stack+0x5b>
 8ac:	60 81       	ld	r22, Z
 8ae:	71 81       	ldd	r23, Z+1	; 0x01
 8b0:	82 81       	ldd	r24, Z+2	; 0x02
 8b2:	93 81       	ldd	r25, Z+3	; 0x03
 8b4:	0c 5f       	subi	r16, 0xFC	; 252
 8b6:	1f 4f       	sbci	r17, 0xFF	; 255
 8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <__stack+0x67>
 8ba:	60 81       	ld	r22, Z
 8bc:	71 81       	ldd	r23, Z+1	; 0x01
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 5f       	subi	r16, 0xFE	; 254
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	a3 01       	movw	r20, r6
 8c8:	0e 94 8c 06 	call	0xd18	; 0xd18 <__ultoa_invert>
 8cc:	88 2e       	mov	r8, r24
 8ce:	86 18       	sub	r8, r6
 8d0:	fb 2d       	mov	r31, r11
 8d2:	ff 77       	andi	r31, 0x7F	; 127
 8d4:	3f 2e       	mov	r3, r31
 8d6:	36 fe       	sbrs	r3, 6
 8d8:	0d c0       	rjmp	.+26     	; 0x8f4 <__stack+0x95>
 8da:	23 2d       	mov	r18, r3
 8dc:	2e 7f       	andi	r18, 0xFE	; 254
 8de:	a2 2e       	mov	r10, r18
 8e0:	89 14       	cp	r8, r9
 8e2:	58 f4       	brcc	.+22     	; 0x8fa <__stack+0x9b>
 8e4:	34 fe       	sbrs	r3, 4
 8e6:	0b c0       	rjmp	.+22     	; 0x8fe <__stack+0x9f>
 8e8:	32 fc       	sbrc	r3, 2
 8ea:	09 c0       	rjmp	.+18     	; 0x8fe <__stack+0x9f>
 8ec:	83 2d       	mov	r24, r3
 8ee:	8e 7e       	andi	r24, 0xEE	; 238
 8f0:	a8 2e       	mov	r10, r24
 8f2:	05 c0       	rjmp	.+10     	; 0x8fe <__stack+0x9f>
 8f4:	b8 2c       	mov	r11, r8
 8f6:	a3 2c       	mov	r10, r3
 8f8:	03 c0       	rjmp	.+6      	; 0x900 <__stack+0xa1>
 8fa:	b8 2c       	mov	r11, r8
 8fc:	01 c0       	rjmp	.+2      	; 0x900 <__stack+0xa1>
 8fe:	b9 2c       	mov	r11, r9
 900:	a4 fe       	sbrs	r10, 4
 902:	0f c0       	rjmp	.+30     	; 0x922 <__stack+0xc3>
 904:	fe 01       	movw	r30, r28
 906:	e8 0d       	add	r30, r8
 908:	f1 1d       	adc	r31, r1
 90a:	80 81       	ld	r24, Z
 90c:	80 33       	cpi	r24, 0x30	; 48
 90e:	21 f4       	brne	.+8      	; 0x918 <__stack+0xb9>
 910:	9a 2d       	mov	r25, r10
 912:	99 7e       	andi	r25, 0xE9	; 233
 914:	a9 2e       	mov	r10, r25
 916:	09 c0       	rjmp	.+18     	; 0x92a <__stack+0xcb>
 918:	a2 fe       	sbrs	r10, 2
 91a:	06 c0       	rjmp	.+12     	; 0x928 <__stack+0xc9>
 91c:	b3 94       	inc	r11
 91e:	b3 94       	inc	r11
 920:	04 c0       	rjmp	.+8      	; 0x92a <__stack+0xcb>
 922:	8a 2d       	mov	r24, r10
 924:	86 78       	andi	r24, 0x86	; 134
 926:	09 f0       	breq	.+2      	; 0x92a <__stack+0xcb>
 928:	b3 94       	inc	r11
 92a:	a3 fc       	sbrc	r10, 3
 92c:	11 c0       	rjmp	.+34     	; 0x950 <__stack+0xf1>
 92e:	a0 fe       	sbrs	r10, 0
 930:	06 c0       	rjmp	.+12     	; 0x93e <__stack+0xdf>
 932:	b2 14       	cp	r11, r2
 934:	88 f4       	brcc	.+34     	; 0x958 <__stack+0xf9>
 936:	28 0c       	add	r2, r8
 938:	92 2c       	mov	r9, r2
 93a:	9b 18       	sub	r9, r11
 93c:	0e c0       	rjmp	.+28     	; 0x95a <__stack+0xfb>
 93e:	b2 14       	cp	r11, r2
 940:	60 f4       	brcc	.+24     	; 0x95a <__stack+0xfb>
 942:	b6 01       	movw	r22, r12
 944:	80 e2       	ldi	r24, 0x20	; 32
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 94c:	b3 94       	inc	r11
 94e:	f7 cf       	rjmp	.-18     	; 0x93e <__stack+0xdf>
 950:	b2 14       	cp	r11, r2
 952:	18 f4       	brcc	.+6      	; 0x95a <__stack+0xfb>
 954:	2b 18       	sub	r2, r11
 956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0xfd>
 958:	98 2c       	mov	r9, r8
 95a:	21 2c       	mov	r2, r1
 95c:	a4 fe       	sbrs	r10, 4
 95e:	10 c0       	rjmp	.+32     	; 0x980 <__stack+0x121>
 960:	b6 01       	movw	r22, r12
 962:	80 e3       	ldi	r24, 0x30	; 48
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 96a:	a2 fe       	sbrs	r10, 2
 96c:	17 c0       	rjmp	.+46     	; 0x99c <__stack+0x13d>
 96e:	a1 fc       	sbrc	r10, 1
 970:	03 c0       	rjmp	.+6      	; 0x978 <__stack+0x119>
 972:	88 e7       	ldi	r24, 0x78	; 120
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	02 c0       	rjmp	.+4      	; 0x97c <__stack+0x11d>
 978:	88 e5       	ldi	r24, 0x58	; 88
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	b6 01       	movw	r22, r12
 97e:	0c c0       	rjmp	.+24     	; 0x998 <__stack+0x139>
 980:	8a 2d       	mov	r24, r10
 982:	86 78       	andi	r24, 0x86	; 134
 984:	59 f0       	breq	.+22     	; 0x99c <__stack+0x13d>
 986:	a1 fe       	sbrs	r10, 1
 988:	02 c0       	rjmp	.+4      	; 0x98e <__stack+0x12f>
 98a:	8b e2       	ldi	r24, 0x2B	; 43
 98c:	01 c0       	rjmp	.+2      	; 0x990 <__stack+0x131>
 98e:	80 e2       	ldi	r24, 0x20	; 32
 990:	a7 fc       	sbrc	r10, 7
 992:	8d e2       	ldi	r24, 0x2D	; 45
 994:	b6 01       	movw	r22, r12
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 99c:	89 14       	cp	r8, r9
 99e:	38 f4       	brcc	.+14     	; 0x9ae <__stack+0x14f>
 9a0:	b6 01       	movw	r22, r12
 9a2:	80 e3       	ldi	r24, 0x30	; 48
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 9aa:	9a 94       	dec	r9
 9ac:	f7 cf       	rjmp	.-18     	; 0x99c <__stack+0x13d>
 9ae:	8a 94       	dec	r8
 9b0:	f3 01       	movw	r30, r6
 9b2:	e8 0d       	add	r30, r8
 9b4:	f1 1d       	adc	r31, r1
 9b6:	80 81       	ld	r24, Z
 9b8:	b6 01       	movw	r22, r12
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 9c0:	81 10       	cpse	r8, r1
 9c2:	f5 cf       	rjmp	.-22     	; 0x9ae <__stack+0x14f>
 9c4:	22 20       	and	r2, r2
 9c6:	09 f4       	brne	.+2      	; 0x9ca <__stack+0x16b>
 9c8:	42 ce       	rjmp	.-892    	; 0x64e <vfprintf+0x24>
 9ca:	b6 01       	movw	r22, r12
 9cc:	80 e2       	ldi	r24, 0x20	; 32
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 9d4:	2a 94       	dec	r2
 9d6:	f6 cf       	rjmp	.-20     	; 0x9c4 <__stack+0x165>
 9d8:	f6 01       	movw	r30, r12
 9da:	86 81       	ldd	r24, Z+6	; 0x06
 9dc:	97 81       	ldd	r25, Z+7	; 0x07
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <__stack+0x185>
 9e0:	8f ef       	ldi	r24, 0xFF	; 255
 9e2:	9f ef       	ldi	r25, 0xFF	; 255
 9e4:	2b 96       	adiw	r28, 0x0b	; 11
 9e6:	e2 e1       	ldi	r30, 0x12	; 18
 9e8:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__epilogue_restores__>

000009ec <calloc>:
 9ec:	0f 93       	push	r16
 9ee:	1f 93       	push	r17
 9f0:	cf 93       	push	r28
 9f2:	df 93       	push	r29
 9f4:	86 9f       	mul	r24, r22
 9f6:	80 01       	movw	r16, r0
 9f8:	87 9f       	mul	r24, r23
 9fa:	10 0d       	add	r17, r0
 9fc:	96 9f       	mul	r25, r22
 9fe:	10 0d       	add	r17, r0
 a00:	11 24       	eor	r1, r1
 a02:	c8 01       	movw	r24, r16
 a04:	0e 94 12 05 	call	0xa24	; 0xa24 <malloc>
 a08:	ec 01       	movw	r28, r24
 a0a:	00 97       	sbiw	r24, 0x00	; 0
 a0c:	29 f0       	breq	.+10     	; 0xa18 <calloc+0x2c>
 a0e:	a8 01       	movw	r20, r16
 a10:	60 e0       	ldi	r22, 0x00	; 0
 a12:	70 e0       	ldi	r23, 0x00	; 0
 a14:	0e 94 3e 06 	call	0xc7c	; 0xc7c <memset>
 a18:	ce 01       	movw	r24, r28
 a1a:	df 91       	pop	r29
 a1c:	cf 91       	pop	r28
 a1e:	1f 91       	pop	r17
 a20:	0f 91       	pop	r16
 a22:	08 95       	ret

00000a24 <malloc>:
 a24:	0f 93       	push	r16
 a26:	1f 93       	push	r17
 a28:	cf 93       	push	r28
 a2a:	df 93       	push	r29
 a2c:	82 30       	cpi	r24, 0x02	; 2
 a2e:	91 05       	cpc	r25, r1
 a30:	10 f4       	brcc	.+4      	; 0xa36 <malloc+0x12>
 a32:	82 e0       	ldi	r24, 0x02	; 2
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <__flp>
 a3a:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <__flp+0x1>
 a3e:	20 e0       	ldi	r18, 0x00	; 0
 a40:	30 e0       	ldi	r19, 0x00	; 0
 a42:	a0 e0       	ldi	r26, 0x00	; 0
 a44:	b0 e0       	ldi	r27, 0x00	; 0
 a46:	30 97       	sbiw	r30, 0x00	; 0
 a48:	19 f1       	breq	.+70     	; 0xa90 <malloc+0x6c>
 a4a:	40 81       	ld	r20, Z
 a4c:	51 81       	ldd	r21, Z+1	; 0x01
 a4e:	02 81       	ldd	r16, Z+2	; 0x02
 a50:	13 81       	ldd	r17, Z+3	; 0x03
 a52:	48 17       	cp	r20, r24
 a54:	59 07       	cpc	r21, r25
 a56:	c8 f0       	brcs	.+50     	; 0xa8a <malloc+0x66>
 a58:	84 17       	cp	r24, r20
 a5a:	95 07       	cpc	r25, r21
 a5c:	69 f4       	brne	.+26     	; 0xa78 <malloc+0x54>
 a5e:	10 97       	sbiw	r26, 0x00	; 0
 a60:	31 f0       	breq	.+12     	; 0xa6e <malloc+0x4a>
 a62:	12 96       	adiw	r26, 0x02	; 2
 a64:	0c 93       	st	X, r16
 a66:	12 97       	sbiw	r26, 0x02	; 2
 a68:	13 96       	adiw	r26, 0x03	; 3
 a6a:	1c 93       	st	X, r17
 a6c:	27 c0       	rjmp	.+78     	; 0xabc <malloc+0x98>
 a6e:	00 93 9a 00 	sts	0x009A, r16	; 0x80009a <__flp>
 a72:	10 93 9b 00 	sts	0x009B, r17	; 0x80009b <__flp+0x1>
 a76:	22 c0       	rjmp	.+68     	; 0xabc <malloc+0x98>
 a78:	21 15       	cp	r18, r1
 a7a:	31 05       	cpc	r19, r1
 a7c:	19 f0       	breq	.+6      	; 0xa84 <malloc+0x60>
 a7e:	42 17       	cp	r20, r18
 a80:	53 07       	cpc	r21, r19
 a82:	18 f4       	brcc	.+6      	; 0xa8a <malloc+0x66>
 a84:	9a 01       	movw	r18, r20
 a86:	bd 01       	movw	r22, r26
 a88:	ef 01       	movw	r28, r30
 a8a:	df 01       	movw	r26, r30
 a8c:	f8 01       	movw	r30, r16
 a8e:	db cf       	rjmp	.-74     	; 0xa46 <malloc+0x22>
 a90:	21 15       	cp	r18, r1
 a92:	31 05       	cpc	r19, r1
 a94:	f9 f0       	breq	.+62     	; 0xad4 <malloc+0xb0>
 a96:	28 1b       	sub	r18, r24
 a98:	39 0b       	sbc	r19, r25
 a9a:	24 30       	cpi	r18, 0x04	; 4
 a9c:	31 05       	cpc	r19, r1
 a9e:	80 f4       	brcc	.+32     	; 0xac0 <malloc+0x9c>
 aa0:	8a 81       	ldd	r24, Y+2	; 0x02
 aa2:	9b 81       	ldd	r25, Y+3	; 0x03
 aa4:	61 15       	cp	r22, r1
 aa6:	71 05       	cpc	r23, r1
 aa8:	21 f0       	breq	.+8      	; 0xab2 <malloc+0x8e>
 aaa:	fb 01       	movw	r30, r22
 aac:	93 83       	std	Z+3, r25	; 0x03
 aae:	82 83       	std	Z+2, r24	; 0x02
 ab0:	04 c0       	rjmp	.+8      	; 0xaba <malloc+0x96>
 ab2:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__flp+0x1>
 ab6:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__flp>
 aba:	fe 01       	movw	r30, r28
 abc:	32 96       	adiw	r30, 0x02	; 2
 abe:	44 c0       	rjmp	.+136    	; 0xb48 <malloc+0x124>
 ac0:	fe 01       	movw	r30, r28
 ac2:	e2 0f       	add	r30, r18
 ac4:	f3 1f       	adc	r31, r19
 ac6:	81 93       	st	Z+, r24
 ac8:	91 93       	st	Z+, r25
 aca:	22 50       	subi	r18, 0x02	; 2
 acc:	31 09       	sbc	r19, r1
 ace:	39 83       	std	Y+1, r19	; 0x01
 ad0:	28 83       	st	Y, r18
 ad2:	3a c0       	rjmp	.+116    	; 0xb48 <malloc+0x124>
 ad4:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <__brkval>
 ad8:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <__brkval+0x1>
 adc:	23 2b       	or	r18, r19
 ade:	41 f4       	brne	.+16     	; 0xaf0 <malloc+0xcc>
 ae0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 ae4:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 ae8:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__brkval+0x1>
 aec:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__brkval>
 af0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 af4:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 af8:	21 15       	cp	r18, r1
 afa:	31 05       	cpc	r19, r1
 afc:	41 f4       	brne	.+16     	; 0xb0e <malloc+0xea>
 afe:	2d b7       	in	r18, 0x3d	; 61
 b00:	3e b7       	in	r19, 0x3e	; 62
 b02:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 b06:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 b0a:	24 1b       	sub	r18, r20
 b0c:	35 0b       	sbc	r19, r21
 b0e:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <__brkval>
 b12:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <__brkval+0x1>
 b16:	e2 17       	cp	r30, r18
 b18:	f3 07       	cpc	r31, r19
 b1a:	a0 f4       	brcc	.+40     	; 0xb44 <malloc+0x120>
 b1c:	2e 1b       	sub	r18, r30
 b1e:	3f 0b       	sbc	r19, r31
 b20:	28 17       	cp	r18, r24
 b22:	39 07       	cpc	r19, r25
 b24:	78 f0       	brcs	.+30     	; 0xb44 <malloc+0x120>
 b26:	ac 01       	movw	r20, r24
 b28:	4e 5f       	subi	r20, 0xFE	; 254
 b2a:	5f 4f       	sbci	r21, 0xFF	; 255
 b2c:	24 17       	cp	r18, r20
 b2e:	35 07       	cpc	r19, r21
 b30:	48 f0       	brcs	.+18     	; 0xb44 <malloc+0x120>
 b32:	4e 0f       	add	r20, r30
 b34:	5f 1f       	adc	r21, r31
 b36:	50 93 99 00 	sts	0x0099, r21	; 0x800099 <__brkval+0x1>
 b3a:	40 93 98 00 	sts	0x0098, r20	; 0x800098 <__brkval>
 b3e:	81 93       	st	Z+, r24
 b40:	91 93       	st	Z+, r25
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <malloc+0x124>
 b44:	e0 e0       	ldi	r30, 0x00	; 0
 b46:	f0 e0       	ldi	r31, 0x00	; 0
 b48:	cf 01       	movw	r24, r30
 b4a:	df 91       	pop	r29
 b4c:	cf 91       	pop	r28
 b4e:	1f 91       	pop	r17
 b50:	0f 91       	pop	r16
 b52:	08 95       	ret

00000b54 <free>:
 b54:	cf 93       	push	r28
 b56:	df 93       	push	r29
 b58:	00 97       	sbiw	r24, 0x00	; 0
 b5a:	09 f4       	brne	.+2      	; 0xb5e <free+0xa>
 b5c:	81 c0       	rjmp	.+258    	; 0xc60 <free+0x10c>
 b5e:	fc 01       	movw	r30, r24
 b60:	32 97       	sbiw	r30, 0x02	; 2
 b62:	13 82       	std	Z+3, r1	; 0x03
 b64:	12 82       	std	Z+2, r1	; 0x02
 b66:	a0 91 9a 00 	lds	r26, 0x009A	; 0x80009a <__flp>
 b6a:	b0 91 9b 00 	lds	r27, 0x009B	; 0x80009b <__flp+0x1>
 b6e:	10 97       	sbiw	r26, 0x00	; 0
 b70:	81 f4       	brne	.+32     	; 0xb92 <free+0x3e>
 b72:	20 81       	ld	r18, Z
 b74:	31 81       	ldd	r19, Z+1	; 0x01
 b76:	82 0f       	add	r24, r18
 b78:	93 1f       	adc	r25, r19
 b7a:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <__brkval>
 b7e:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <__brkval+0x1>
 b82:	28 17       	cp	r18, r24
 b84:	39 07       	cpc	r19, r25
 b86:	51 f5       	brne	.+84     	; 0xbdc <free+0x88>
 b88:	f0 93 99 00 	sts	0x0099, r31	; 0x800099 <__brkval+0x1>
 b8c:	e0 93 98 00 	sts	0x0098, r30	; 0x800098 <__brkval>
 b90:	67 c0       	rjmp	.+206    	; 0xc60 <free+0x10c>
 b92:	ed 01       	movw	r28, r26
 b94:	20 e0       	ldi	r18, 0x00	; 0
 b96:	30 e0       	ldi	r19, 0x00	; 0
 b98:	ce 17       	cp	r28, r30
 b9a:	df 07       	cpc	r29, r31
 b9c:	40 f4       	brcc	.+16     	; 0xbae <free+0x5a>
 b9e:	4a 81       	ldd	r20, Y+2	; 0x02
 ba0:	5b 81       	ldd	r21, Y+3	; 0x03
 ba2:	9e 01       	movw	r18, r28
 ba4:	41 15       	cp	r20, r1
 ba6:	51 05       	cpc	r21, r1
 ba8:	f1 f0       	breq	.+60     	; 0xbe6 <free+0x92>
 baa:	ea 01       	movw	r28, r20
 bac:	f5 cf       	rjmp	.-22     	; 0xb98 <free+0x44>
 bae:	d3 83       	std	Z+3, r29	; 0x03
 bb0:	c2 83       	std	Z+2, r28	; 0x02
 bb2:	40 81       	ld	r20, Z
 bb4:	51 81       	ldd	r21, Z+1	; 0x01
 bb6:	84 0f       	add	r24, r20
 bb8:	95 1f       	adc	r25, r21
 bba:	c8 17       	cp	r28, r24
 bbc:	d9 07       	cpc	r29, r25
 bbe:	59 f4       	brne	.+22     	; 0xbd6 <free+0x82>
 bc0:	88 81       	ld	r24, Y
 bc2:	99 81       	ldd	r25, Y+1	; 0x01
 bc4:	84 0f       	add	r24, r20
 bc6:	95 1f       	adc	r25, r21
 bc8:	02 96       	adiw	r24, 0x02	; 2
 bca:	91 83       	std	Z+1, r25	; 0x01
 bcc:	80 83       	st	Z, r24
 bce:	8a 81       	ldd	r24, Y+2	; 0x02
 bd0:	9b 81       	ldd	r25, Y+3	; 0x03
 bd2:	93 83       	std	Z+3, r25	; 0x03
 bd4:	82 83       	std	Z+2, r24	; 0x02
 bd6:	21 15       	cp	r18, r1
 bd8:	31 05       	cpc	r19, r1
 bda:	29 f4       	brne	.+10     	; 0xbe6 <free+0x92>
 bdc:	f0 93 9b 00 	sts	0x009B, r31	; 0x80009b <__flp+0x1>
 be0:	e0 93 9a 00 	sts	0x009A, r30	; 0x80009a <__flp>
 be4:	3d c0       	rjmp	.+122    	; 0xc60 <free+0x10c>
 be6:	e9 01       	movw	r28, r18
 be8:	fb 83       	std	Y+3, r31	; 0x03
 bea:	ea 83       	std	Y+2, r30	; 0x02
 bec:	49 91       	ld	r20, Y+
 bee:	59 91       	ld	r21, Y+
 bf0:	c4 0f       	add	r28, r20
 bf2:	d5 1f       	adc	r29, r21
 bf4:	ec 17       	cp	r30, r28
 bf6:	fd 07       	cpc	r31, r29
 bf8:	61 f4       	brne	.+24     	; 0xc12 <free+0xbe>
 bfa:	80 81       	ld	r24, Z
 bfc:	91 81       	ldd	r25, Z+1	; 0x01
 bfe:	84 0f       	add	r24, r20
 c00:	95 1f       	adc	r25, r21
 c02:	02 96       	adiw	r24, 0x02	; 2
 c04:	e9 01       	movw	r28, r18
 c06:	99 83       	std	Y+1, r25	; 0x01
 c08:	88 83       	st	Y, r24
 c0a:	82 81       	ldd	r24, Z+2	; 0x02
 c0c:	93 81       	ldd	r25, Z+3	; 0x03
 c0e:	9b 83       	std	Y+3, r25	; 0x03
 c10:	8a 83       	std	Y+2, r24	; 0x02
 c12:	e0 e0       	ldi	r30, 0x00	; 0
 c14:	f0 e0       	ldi	r31, 0x00	; 0
 c16:	12 96       	adiw	r26, 0x02	; 2
 c18:	8d 91       	ld	r24, X+
 c1a:	9c 91       	ld	r25, X
 c1c:	13 97       	sbiw	r26, 0x03	; 3
 c1e:	00 97       	sbiw	r24, 0x00	; 0
 c20:	19 f0       	breq	.+6      	; 0xc28 <free+0xd4>
 c22:	fd 01       	movw	r30, r26
 c24:	dc 01       	movw	r26, r24
 c26:	f7 cf       	rjmp	.-18     	; 0xc16 <free+0xc2>
 c28:	8d 91       	ld	r24, X+
 c2a:	9c 91       	ld	r25, X
 c2c:	11 97       	sbiw	r26, 0x01	; 1
 c2e:	9d 01       	movw	r18, r26
 c30:	2e 5f       	subi	r18, 0xFE	; 254
 c32:	3f 4f       	sbci	r19, 0xFF	; 255
 c34:	82 0f       	add	r24, r18
 c36:	93 1f       	adc	r25, r19
 c38:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <__brkval>
 c3c:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <__brkval+0x1>
 c40:	28 17       	cp	r18, r24
 c42:	39 07       	cpc	r19, r25
 c44:	69 f4       	brne	.+26     	; 0xc60 <free+0x10c>
 c46:	30 97       	sbiw	r30, 0x00	; 0
 c48:	29 f4       	brne	.+10     	; 0xc54 <free+0x100>
 c4a:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__flp+0x1>
 c4e:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__flp>
 c52:	02 c0       	rjmp	.+4      	; 0xc58 <free+0x104>
 c54:	13 82       	std	Z+3, r1	; 0x03
 c56:	12 82       	std	Z+2, r1	; 0x02
 c58:	b0 93 99 00 	sts	0x0099, r27	; 0x800099 <__brkval+0x1>
 c5c:	a0 93 98 00 	sts	0x0098, r26	; 0x800098 <__brkval>
 c60:	df 91       	pop	r29
 c62:	cf 91       	pop	r28
 c64:	08 95       	ret

00000c66 <strnlen_P>:
 c66:	fc 01       	movw	r30, r24
 c68:	05 90       	lpm	r0, Z+
 c6a:	61 50       	subi	r22, 0x01	; 1
 c6c:	70 40       	sbci	r23, 0x00	; 0
 c6e:	01 10       	cpse	r0, r1
 c70:	d8 f7       	brcc	.-10     	; 0xc68 <strnlen_P+0x2>
 c72:	80 95       	com	r24
 c74:	90 95       	com	r25
 c76:	8e 0f       	add	r24, r30
 c78:	9f 1f       	adc	r25, r31
 c7a:	08 95       	ret

00000c7c <memset>:
 c7c:	dc 01       	movw	r26, r24
 c7e:	01 c0       	rjmp	.+2      	; 0xc82 <memset+0x6>
 c80:	6d 93       	st	X+, r22
 c82:	41 50       	subi	r20, 0x01	; 1
 c84:	50 40       	sbci	r21, 0x00	; 0
 c86:	e0 f7       	brcc	.-8      	; 0xc80 <memset+0x4>
 c88:	08 95       	ret

00000c8a <strnlen>:
 c8a:	fc 01       	movw	r30, r24
 c8c:	61 50       	subi	r22, 0x01	; 1
 c8e:	70 40       	sbci	r23, 0x00	; 0
 c90:	01 90       	ld	r0, Z+
 c92:	01 10       	cpse	r0, r1
 c94:	d8 f7       	brcc	.-10     	; 0xc8c <strnlen+0x2>
 c96:	80 95       	com	r24
 c98:	90 95       	com	r25
 c9a:	8e 0f       	add	r24, r30
 c9c:	9f 1f       	adc	r25, r31
 c9e:	08 95       	ret

00000ca0 <fputc>:
 ca0:	0f 93       	push	r16
 ca2:	1f 93       	push	r17
 ca4:	cf 93       	push	r28
 ca6:	df 93       	push	r29
 ca8:	fb 01       	movw	r30, r22
 caa:	23 81       	ldd	r18, Z+3	; 0x03
 cac:	21 fd       	sbrc	r18, 1
 cae:	03 c0       	rjmp	.+6      	; 0xcb6 <fputc+0x16>
 cb0:	8f ef       	ldi	r24, 0xFF	; 255
 cb2:	9f ef       	ldi	r25, 0xFF	; 255
 cb4:	2c c0       	rjmp	.+88     	; 0xd0e <fputc+0x6e>
 cb6:	22 ff       	sbrs	r18, 2
 cb8:	16 c0       	rjmp	.+44     	; 0xce6 <fputc+0x46>
 cba:	46 81       	ldd	r20, Z+6	; 0x06
 cbc:	57 81       	ldd	r21, Z+7	; 0x07
 cbe:	24 81       	ldd	r18, Z+4	; 0x04
 cc0:	35 81       	ldd	r19, Z+5	; 0x05
 cc2:	42 17       	cp	r20, r18
 cc4:	53 07       	cpc	r21, r19
 cc6:	44 f4       	brge	.+16     	; 0xcd8 <fputc+0x38>
 cc8:	a0 81       	ld	r26, Z
 cca:	b1 81       	ldd	r27, Z+1	; 0x01
 ccc:	9d 01       	movw	r18, r26
 cce:	2f 5f       	subi	r18, 0xFF	; 255
 cd0:	3f 4f       	sbci	r19, 0xFF	; 255
 cd2:	31 83       	std	Z+1, r19	; 0x01
 cd4:	20 83       	st	Z, r18
 cd6:	8c 93       	st	X, r24
 cd8:	26 81       	ldd	r18, Z+6	; 0x06
 cda:	37 81       	ldd	r19, Z+7	; 0x07
 cdc:	2f 5f       	subi	r18, 0xFF	; 255
 cde:	3f 4f       	sbci	r19, 0xFF	; 255
 ce0:	37 83       	std	Z+7, r19	; 0x07
 ce2:	26 83       	std	Z+6, r18	; 0x06
 ce4:	14 c0       	rjmp	.+40     	; 0xd0e <fputc+0x6e>
 ce6:	8b 01       	movw	r16, r22
 ce8:	ec 01       	movw	r28, r24
 cea:	fb 01       	movw	r30, r22
 cec:	00 84       	ldd	r0, Z+8	; 0x08
 cee:	f1 85       	ldd	r31, Z+9	; 0x09
 cf0:	e0 2d       	mov	r30, r0
 cf2:	09 95       	icall
 cf4:	89 2b       	or	r24, r25
 cf6:	e1 f6       	brne	.-72     	; 0xcb0 <fputc+0x10>
 cf8:	d8 01       	movw	r26, r16
 cfa:	16 96       	adiw	r26, 0x06	; 6
 cfc:	8d 91       	ld	r24, X+
 cfe:	9c 91       	ld	r25, X
 d00:	17 97       	sbiw	r26, 0x07	; 7
 d02:	01 96       	adiw	r24, 0x01	; 1
 d04:	17 96       	adiw	r26, 0x07	; 7
 d06:	9c 93       	st	X, r25
 d08:	8e 93       	st	-X, r24
 d0a:	16 97       	sbiw	r26, 0x06	; 6
 d0c:	ce 01       	movw	r24, r28
 d0e:	df 91       	pop	r29
 d10:	cf 91       	pop	r28
 d12:	1f 91       	pop	r17
 d14:	0f 91       	pop	r16
 d16:	08 95       	ret

00000d18 <__ultoa_invert>:
 d18:	fa 01       	movw	r30, r20
 d1a:	aa 27       	eor	r26, r26
 d1c:	28 30       	cpi	r18, 0x08	; 8
 d1e:	51 f1       	breq	.+84     	; 0xd74 <__ultoa_invert+0x5c>
 d20:	20 31       	cpi	r18, 0x10	; 16
 d22:	81 f1       	breq	.+96     	; 0xd84 <__ultoa_invert+0x6c>
 d24:	e8 94       	clt
 d26:	6f 93       	push	r22
 d28:	6e 7f       	andi	r22, 0xFE	; 254
 d2a:	6e 5f       	subi	r22, 0xFE	; 254
 d2c:	7f 4f       	sbci	r23, 0xFF	; 255
 d2e:	8f 4f       	sbci	r24, 0xFF	; 255
 d30:	9f 4f       	sbci	r25, 0xFF	; 255
 d32:	af 4f       	sbci	r26, 0xFF	; 255
 d34:	b1 e0       	ldi	r27, 0x01	; 1
 d36:	3e d0       	rcall	.+124    	; 0xdb4 <__ultoa_invert+0x9c>
 d38:	b4 e0       	ldi	r27, 0x04	; 4
 d3a:	3c d0       	rcall	.+120    	; 0xdb4 <__ultoa_invert+0x9c>
 d3c:	67 0f       	add	r22, r23
 d3e:	78 1f       	adc	r23, r24
 d40:	89 1f       	adc	r24, r25
 d42:	9a 1f       	adc	r25, r26
 d44:	a1 1d       	adc	r26, r1
 d46:	68 0f       	add	r22, r24
 d48:	79 1f       	adc	r23, r25
 d4a:	8a 1f       	adc	r24, r26
 d4c:	91 1d       	adc	r25, r1
 d4e:	a1 1d       	adc	r26, r1
 d50:	6a 0f       	add	r22, r26
 d52:	71 1d       	adc	r23, r1
 d54:	81 1d       	adc	r24, r1
 d56:	91 1d       	adc	r25, r1
 d58:	a1 1d       	adc	r26, r1
 d5a:	20 d0       	rcall	.+64     	; 0xd9c <__ultoa_invert+0x84>
 d5c:	09 f4       	brne	.+2      	; 0xd60 <__ultoa_invert+0x48>
 d5e:	68 94       	set
 d60:	3f 91       	pop	r19
 d62:	2a e0       	ldi	r18, 0x0A	; 10
 d64:	26 9f       	mul	r18, r22
 d66:	11 24       	eor	r1, r1
 d68:	30 19       	sub	r19, r0
 d6a:	30 5d       	subi	r19, 0xD0	; 208
 d6c:	31 93       	st	Z+, r19
 d6e:	de f6       	brtc	.-74     	; 0xd26 <__ultoa_invert+0xe>
 d70:	cf 01       	movw	r24, r30
 d72:	08 95       	ret
 d74:	46 2f       	mov	r20, r22
 d76:	47 70       	andi	r20, 0x07	; 7
 d78:	40 5d       	subi	r20, 0xD0	; 208
 d7a:	41 93       	st	Z+, r20
 d7c:	b3 e0       	ldi	r27, 0x03	; 3
 d7e:	0f d0       	rcall	.+30     	; 0xd9e <__ultoa_invert+0x86>
 d80:	c9 f7       	brne	.-14     	; 0xd74 <__ultoa_invert+0x5c>
 d82:	f6 cf       	rjmp	.-20     	; 0xd70 <__ultoa_invert+0x58>
 d84:	46 2f       	mov	r20, r22
 d86:	4f 70       	andi	r20, 0x0F	; 15
 d88:	40 5d       	subi	r20, 0xD0	; 208
 d8a:	4a 33       	cpi	r20, 0x3A	; 58
 d8c:	18 f0       	brcs	.+6      	; 0xd94 <__ultoa_invert+0x7c>
 d8e:	49 5d       	subi	r20, 0xD9	; 217
 d90:	31 fd       	sbrc	r19, 1
 d92:	40 52       	subi	r20, 0x20	; 32
 d94:	41 93       	st	Z+, r20
 d96:	02 d0       	rcall	.+4      	; 0xd9c <__ultoa_invert+0x84>
 d98:	a9 f7       	brne	.-22     	; 0xd84 <__ultoa_invert+0x6c>
 d9a:	ea cf       	rjmp	.-44     	; 0xd70 <__ultoa_invert+0x58>
 d9c:	b4 e0       	ldi	r27, 0x04	; 4
 d9e:	a6 95       	lsr	r26
 da0:	97 95       	ror	r25
 da2:	87 95       	ror	r24
 da4:	77 95       	ror	r23
 da6:	67 95       	ror	r22
 da8:	ba 95       	dec	r27
 daa:	c9 f7       	brne	.-14     	; 0xd9e <__ultoa_invert+0x86>
 dac:	00 97       	sbiw	r24, 0x00	; 0
 dae:	61 05       	cpc	r22, r1
 db0:	71 05       	cpc	r23, r1
 db2:	08 95       	ret
 db4:	9b 01       	movw	r18, r22
 db6:	ac 01       	movw	r20, r24
 db8:	0a 2e       	mov	r0, r26
 dba:	06 94       	lsr	r0
 dbc:	57 95       	ror	r21
 dbe:	47 95       	ror	r20
 dc0:	37 95       	ror	r19
 dc2:	27 95       	ror	r18
 dc4:	ba 95       	dec	r27
 dc6:	c9 f7       	brne	.-14     	; 0xdba <__ultoa_invert+0xa2>
 dc8:	62 0f       	add	r22, r18
 dca:	73 1f       	adc	r23, r19
 dcc:	84 1f       	adc	r24, r20
 dce:	95 1f       	adc	r25, r21
 dd0:	a0 1d       	adc	r26, r0
 dd2:	08 95       	ret

00000dd4 <__prologue_saves__>:
 dd4:	2f 92       	push	r2
 dd6:	3f 92       	push	r3
 dd8:	4f 92       	push	r4
 dda:	5f 92       	push	r5
 ddc:	6f 92       	push	r6
 dde:	7f 92       	push	r7
 de0:	8f 92       	push	r8
 de2:	9f 92       	push	r9
 de4:	af 92       	push	r10
 de6:	bf 92       	push	r11
 de8:	cf 92       	push	r12
 dea:	df 92       	push	r13
 dec:	ef 92       	push	r14
 dee:	ff 92       	push	r15
 df0:	0f 93       	push	r16
 df2:	1f 93       	push	r17
 df4:	cf 93       	push	r28
 df6:	df 93       	push	r29
 df8:	cd b7       	in	r28, 0x3d	; 61
 dfa:	de b7       	in	r29, 0x3e	; 62
 dfc:	ca 1b       	sub	r28, r26
 dfe:	db 0b       	sbc	r29, r27
 e00:	0f b6       	in	r0, 0x3f	; 63
 e02:	f8 94       	cli
 e04:	de bf       	out	0x3e, r29	; 62
 e06:	0f be       	out	0x3f, r0	; 63
 e08:	cd bf       	out	0x3d, r28	; 61
 e0a:	09 94       	ijmp

00000e0c <__epilogue_restores__>:
 e0c:	2a 88       	ldd	r2, Y+18	; 0x12
 e0e:	39 88       	ldd	r3, Y+17	; 0x11
 e10:	48 88       	ldd	r4, Y+16	; 0x10
 e12:	5f 84       	ldd	r5, Y+15	; 0x0f
 e14:	6e 84       	ldd	r6, Y+14	; 0x0e
 e16:	7d 84       	ldd	r7, Y+13	; 0x0d
 e18:	8c 84       	ldd	r8, Y+12	; 0x0c
 e1a:	9b 84       	ldd	r9, Y+11	; 0x0b
 e1c:	aa 84       	ldd	r10, Y+10	; 0x0a
 e1e:	b9 84       	ldd	r11, Y+9	; 0x09
 e20:	c8 84       	ldd	r12, Y+8	; 0x08
 e22:	df 80       	ldd	r13, Y+7	; 0x07
 e24:	ee 80       	ldd	r14, Y+6	; 0x06
 e26:	fd 80       	ldd	r15, Y+5	; 0x05
 e28:	0c 81       	ldd	r16, Y+4	; 0x04
 e2a:	1b 81       	ldd	r17, Y+3	; 0x03
 e2c:	aa 81       	ldd	r26, Y+2	; 0x02
 e2e:	b9 81       	ldd	r27, Y+1	; 0x01
 e30:	ce 0f       	add	r28, r30
 e32:	d1 1d       	adc	r29, r1
 e34:	0f b6       	in	r0, 0x3f	; 63
 e36:	f8 94       	cli
 e38:	de bf       	out	0x3e, r29	; 62
 e3a:	0f be       	out	0x3f, r0	; 63
 e3c:	cd bf       	out	0x3d, r28	; 61
 e3e:	ed 01       	movw	r28, r26
 e40:	08 95       	ret

00000e42 <_exit>:
 e42:	f8 94       	cli

00000e44 <__stop_program>:
 e44:	ff cf       	rjmp	.-2      	; 0xe44 <__stop_program>
